1. Differentiate between stack and queue data structure.
<-----------------------------------------------------------------------------------------------
Stack	                                                                                         |
Stack is a linear data structure where data is added and removed from the top.	               |
Stack is based on LIFO(Last In First Out) principle.                                           |
Insertion operation in Stack is known as push.	                                               |
Delete operation in Stack is known as pop.	                                                   |
Only one pointer is available for both addition and deletion: top().                           |
Used in solving recursion problems.                                                            |
<-----------------------------------------------------------------------------------------------
<------------------------------------------------------------------------------------------------
Queue                                                                                            |
Queue is a linear data structure where data is ended at the rear end and removed from the front. |
Queue is based on FIFO(First In First Out) principle.                                            |
Insertion operation in Queue is known as eneque.                                                 |
Delete operation in Queue is known as dequeue.                                                   |
Two pointers are available for addition and deletion: front() and rear().                        |
Used in solving sequential processing problems.                                                  |
<-------------------------------------------------------------------------------------------------

2. How to implement a queue using stack?
A queue can be implemented using two stacks. Let q be the queue andstack1 and stack2 be the 2 stacks for implementing q. 
We know that stack supports push, pop, and peek operations and using these operations, we need to emulate the operations of the 
queue - enqueue and dequeue. Hence, queue q can be implemented in two methods (Both the methods use auxillary space complexity of O(n)):

1. By making enqueue operation costly:
Here, the oldest element is always at the top of stack1 which ensures dequeue operation occurs in O(1) time complexity.
To place the element at top of stack1, stack2 is used.
Pseudocode:
Enqueue: Here time complexity will be O(n)
enqueue(q, data):  
  While stack1 is not empty:
    Push everything from stack1 to stack2.
    Push data to stack1
    Push everything back to stack1.
    
Dequeue: Here time complexity will be O(1)
deQueue(q):
 If stack1 is empty then error  else
 Pop an item from stack1 and return it.
 
 
 2. By making the dequeue operation costly:
Here, for enqueue operation, the new element is pushed at the top of stack1. Here, the enqueue operation time complexity is O(1).
In dequeue, if stack2 is empty, all elements from stack1 are moved to stack2 and top of stack2 is the result. Basically, 
reversing the list by pushing to a stack and returning the first enqueued element. This operation of pushing all elements to a new stack takes O(n) complexity.
Pseudocode:
Enqueue: Time complexity: O(1)
enqueue(q, data):    
Push data to stack1

Dequeue: Time complexity: O(n)
dequeue(q): 
If both stacks are empty then raise error.
If stack2 is empty:  
While stack1 is not empty:
 push everything from stack1 to stack2. 
  Pop the element from stack2 and return it.
  
<--------------------------------------------------------------------------------------------------------------------------------------------->  

3. How do you implement stack using queues?
A stack can be implemented using two queues. We know that a queue supports enqueue and dequeue operations. 
Using these operations, we need to develop push, pop operations.
Let stack be ‘s’ and queues used to implement be ‘q1’ and ‘q2’. Then, stack ‘s’ can be implemented in two ways:

1. By making push operation costly:
This method ensures that the newly entered element is always at the front of ‘q1’ so that pop operation just dequeues from ‘q1’.
‘q2’ is used as auxillary queue to put every new element in front of ‘q1’ while ensuring pop happens in O(1) complexity.
Pseudocode:
Push element to stack s: Here push takes O(n) time complexity.
push(s, data):
    Enqueue data to q2
    Dequeue elements one by one from q1 and enqueue to q2.
    Swap the names of q1 and q2
Pop element from stack s: Takes O(1) time complexity.
pop(s):
dequeue from q1 and return it.

2. By making pop operation costly:
In push operation, the element is enqueued to q1.
In pop operation, all the elements from q1 except the last remaining element, are pushed to q2 if it is empty. That last element remaining of q1 is dequeued and returned.
Pseudocode:
Push element to stack s: Here push takes O(1) time complexity.
push(s,data):
Enqueue data to q1
Pop element from stack s: Takes O(n) time complexity.
pop(s): 
	Step1: Dequeue every elements except the last element from q1 and enqueue to q2.
	Step2: Dequeue the last item of q1, the dequeued item is stored in result variable.
 	Step3: Swap the names of q1 and q2 (for getting updated data after dequeue) 
 	Step4: Return the result.

<-------------------------------------------------------------------------------------------------------------------------------------------->

4. What is array data structure? What are the applications of arrays?
An array data structure is a data structure that is used to store data in a way that is efficient and easy to access. 
It is similar to a list in that it stores data in a sequence.
However, an array data structure differs from a list in that it can hold much more data than a list can. 
An array data structure is created by combining several arrays together. 
Each array is then given a unique identifier, and each array’s data is stored in the order in which they are created.
Array data structures are commonly used in databases and other computer systems to store large amounts of data efficiently. 
They are also useful for storing information that is frequently accessed, such as large amounts of text or images.

<---------------------------------------------------------------------------------------------------------------------------------------------------->

5. Elaborate on different types of array data structure
There are several different types of arrays:
One-dimensional array: A one-dimensional array stores its elements in contiguous memory locations, accessing them using a single index value. 
It is a linear data structure holding all the elements in a sequence.
 0    1    2    3   4    5    6   7     8   9
____ ____ ____ ___ ____ ____ ____ ____ ____ ____
| 2 | 42 | 71 | 9 | 21 | 33 | 41 | 82 | 2 | 11  |
____ ____ ____ ____ ____ ____ ____ ____ ____ ___
               One Dimensional Array

Two-dimensional array: A two-dimensional array is a tabular array that includes rows and columns and stores data. 
An M × N two-dimensional array is created by grouping M rows and N columns into N columns and rows.
                  COLUMNS
    ________________
 1   | 2 | 42 | 71 |
    _______________
 2  | 2 | 42 | 71 |   ROW
    ______________
 3 | 2 | 42 | 71 |
    ______________ 
     1    2    3    
     
Three-dimensional array: A three-dimensional array is a grid that has rows, columns, and depth as a third dimension.
It comprises a cube with rows, columns, and depth as a third dimension. 
The three-dimensional array has three subscripts for a position in a particular row, column, and depth.
Depth (dimension or layer) is the first index, row index is the second index, and column index is the third index.

<------------------------------------------------------------------------------------------------------------------------------>
